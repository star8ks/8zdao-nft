{
  "address": "0xe9294C9f1F29d1D8B4AbF077cb1795de5a838Ccb",
  "abi": [
    {
      "inputs": [],
      "name": "description",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string[]",
          "name": "words",
          "type": "string[]"
        }
      ],
      "name": "renderStrings",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xd9770768a03879f18f216a770536fe8c4911e58ea66318acb3a64e28c7966df2",
  "receipt": {
    "to": null,
    "from": "0xb911edC355C8B88CAD7B28bDa54F7649376B8612",
    "contractAddress": "0xe9294C9f1F29d1D8B4AbF077cb1795de5a838Ccb",
    "transactionIndex": 163,
    "gasUsed": "723259",
    "logsBloom": "0x
    "blockHash": "0xeb19f9640ecfe7ebf7907058a219711bb450c550c851abd9851cf6513abf1536",
    "transactionHash": "0xd9770768a03879f18f216a770536fe8c4911e58ea66318acb3a64e28c7966df2",
    "logs": [],
    "blockNumber": 14909056,
    "cumulativeGasUsed": "16591734",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "7b4dc19738ce7169415b1d413193f0f8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"words\",\"type\":\"string[]\"}],\"name\":\"renderStrings\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/NFT8ZDAORenderer.sol\":\"NFT8ZDAORenderer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5efa2a2ed44af15fd5bec8c43b45cb26fe6cb68671fea151e6afcfed66ed2672\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"src/NFT8ZDAORenderer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\n\\ncontract NFT8ZDAORenderer {\\n    using Strings for uint256;\\n    string public constant description = unicode\\\"\\u5929\\u5730\\u4e4b\\u95f4\\uff0c\\u4e00\\u6c14\\u800c\\u5df2\\u3002\\u60df\\u6709\\u52a8\\u9759\\uff0c\\u9042\\u5206\\u9634\\u9633\\uff1b\\u6709\\u8001\\u5c11\\uff0c\\u9042\\u5206\\u56db\\u8c61\\u3002\\u6c34\\u8005\\uff0c\\u592a\\u9634\\u4e5f\\uff1b\\u706b\\u8005\\uff0c\\u592a\\u9633\\u4e5f\\uff1b\\u6728\\u8005\\uff0c\\u5c11\\u9633\\u4e5f\\uff1b\\u91d1\\u8005\\uff0c\\u5c11\\u9634\\u4e5f\\uff1b\\u571f\\u8005\\uff0c\\u9634\\u9633\\u8001\\u5c11\\uff0c\\u6728\\u706b\\u91d1\\u6c34\\u51b2\\u6c14\\u6240\\u7ed3\\u4e5f\\u3002\\u2014\\u2014\\u300a\\u5b50\\u5e73\\u771f\\u8be0\\u300b\\\";\\n\\n    function renderStrings(\\n        uint256 tokenId,\\n        string memory name,\\n        string[] memory words\\n    ) external pure returns (string memory) {\\n        string memory svg = string(abi.encodePacked(\\n            '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" preserveAspectRatio=\\\"xMinYMin meet\\\" viewBox=\\\"0 0 350 350\\\">',\\n            '<style>.t { fill: white; font-family: sans-serif; font-size: ',\\n            words.length == 1 ? '196' : '128',\\n            'px; text-anchor: middle; dominant-baseline: auto; writing-mode: tb; }</style>',\\n            '<rect width=\\\"100%\\\" height=\\\"100%\\\" fill=\\\"black\\\" />',\\n            '<text x=\\\"50%\\\" y=\\\"50%\\\" class=\\\"t\\\">'\\n        ));\\n        for (uint256 i=0; i<words.length; ++i) {\\n            svg = string(abi.encodePacked(svg, words[i]));\\n        }\\n        svg = string(abi.encodePacked(svg, '</text></svg>'));\\n        string memory json = Base64.encode(bytes(string(abi.encodePacked(\\n            '{',\\n            '\\\"name\\\":\\\"8ZDAO #', tokenId.toString(), ' - ', name, '\\\",',\\n            '\\\"description\\\":\\\"', description, '\\\",',\\n            '\\\"image\\\":\\\"data:image/svg+xml;base64,', Base64.encode(bytes(svg)), '\\\"',\\n            '}'\\n        ))));\\n        string memory output = string(abi.encodePacked('data:application/json;base64,', json));\\n        return output;\\n    }\\n}\\n\",\"keccak256\":\"0xf159bbf40403b6e0ed4d7e14c180b1bb6b3574d1c566806456dc0d63f540d4bb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610c1e806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80637284e4161461003b57806382b6e4d414610059575b600080fd5b61004361006c565b6040516100509190610485565b60405180910390f35b61004361006736600461056f565b610089565b60405180610120016040528060f98152602001610af060f9913981565b6060600082516001146100b7576040518060400160405280600381526020016206264760eb1b8152506100d4565b60405180604001604052806003815260200162189c9b60e91b8152505b6040516020016100e4919061067e565b604051602081830303815290604052905060005b835181101561014f578184828151811061011457610114610830565b602002602001015160405160200161012d929190610846565b6040516020818303038152906040529150806101489061088b565b90506100f8565b508060405160200161016191906108a6565b604051602081830303815290604052905060006101cb610180876101fb565b8660405180610120016040528060f98152602001610af060f991396101a486610301565b6040516020016101b794939291906108d7565b604051602081830303815290604052610301565b90506000816040516020016101e091906109de565b60408051808303601f19018152919052979650505050505050565b60608161021f5750506040805180820190915260018152600360fc1b602082015290565b8160005b811561024957806102338161088b565b91506102429050600a83610a39565b9150610223565b60008167ffffffffffffffff811115610264576102646104b8565b6040519080825280601f01601f19166020018201604052801561028e576020820181803683370190505b5090505b84156102f9576102a3600183610a4d565b91506102b0600a86610a64565b6102bb906030610a78565b60f81b8183815181106102d0576102d0610830565b60200101906001600160f81b031916908160001a9053506102f2600a86610a39565b9450610292565b949350505050565b606081516000141561032157505060408051602081019091526000815290565b6000604051806060016040528060408152602001610ab060409139905060006003845160026103509190610a78565b61035a9190610a39565b610365906004610a90565b67ffffffffffffffff81111561037d5761037d6104b8565b6040519080825280601f01601f1916602001820160405280156103a7576020820181803683370190505b509050600182016020820185865187015b80821015610413576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f81168501518453506001830192506103b8565b505060038651066001811461042f57600281146104425761044a565b603d6001830353603d600283035361044a565b603d60018303535b509195945050505050565b60005b83811015610470578181015183820152602001610458565b8381111561047f576000848401525b50505050565b60208152600082518060208401526104a4816040850160208701610455565b601f01601f19169190910160400192915050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156104f7576104f76104b8565b604052919050565b600082601f83011261051057600080fd5b813567ffffffffffffffff81111561052a5761052a6104b8565b61053d601f8201601f19166020016104ce565b81815284602083860101111561055257600080fd5b816020850160208301376000918101602001919091529392505050565b60008060006060848603121561058457600080fd5b8335925060208085013567ffffffffffffffff808211156105a457600080fd5b6105b0888389016104ff565b945060408701359150808211156105c657600080fd5b818701915087601f8301126105da57600080fd5b8135818111156105ec576105ec6104b8565b8060051b6105fb8582016104ce565b918252838101850191858101908b84111561061557600080fd5b86860192505b83831015610651578235858111156106335760008081fd5b6106418d89838a01016104ff565b835250918601919086019061061b565b809750505050505050509250925092565b60008151610674818560208601610455565b9290920192915050565b7f3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323081527f30302f73766722207072657365727665417370656374526174696f3d22784d6960208201527f6e594d696e206d656574222076696577426f783d223020302033353020333530604082015261111f60f11b60608201527f3c7374796c653e2e74207b2066696c6c3a2077686974653b20666f6e742d666160628201527f6d696c793a2073616e732d73657269663b20666f6e742d73697a653a2000000060828201526000825161075981609f850160208701610455565b7f70783b20746578742d616e63686f723a206d6964646c653b20646f6d696e616e609f918401918201527f742d626173656c696e653a206175746f3b2077726974696e672d6d6f64653a2060bf8201526c3a311d903e9e17b9ba3cb6329f60991b60df8201527f3c726563742077696474683d223130302522206865696768743d22313030252260ec8201526f103334b6361e91313630b1b59110179f60811b61010c8201526102f961011c82017f3c7465787420783d223530252220793d223530252220636c6173733d2274223e815260200190565b634e487b7160e01b600052603260045260246000fd5b60008351610858818460208801610455565b83519083019061086c818360208801610455565b01949350505050565b634e487b7160e01b600052601160045260246000fd5b600060001982141561089f5761089f610875565b5060010190565b600082516108b8818460208701610455565b6c1e17ba32bc3a1f1e17b9bb339f60991b920191825250600d01919050565b607b60f81b81526e226e616d65223a22385a44414f202360881b6001820152845160009061090c816010850160208a01610455565b6201016960ed1b601091840191820152855161092f816013840160208a01610455565b61088b60f21b6013929091019182018190526e113232b9b1b934b83a34b7b7111d1160891b6015830152855161096c816024850160208a01610455565b60249201918201527f22696d616765223a22646174613a696d6167652f7376672b786d6c3b626173656026820152620d8d0b60ea1b60468201526109d36109c66109b96049840187610662565b601160f91b815260010190565b607d60f81b815260010190565b979650505050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815260008251610a1681601d850160208701610455565b91909101601d0192915050565b634e487b7160e01b600052601260045260246000fd5b600082610a4857610a48610a23565b500490565b600082821015610a5f57610a5f610875565b500390565b600082610a7357610a73610a23565b500690565b60008219821115610a8b57610a8b610875565b500190565b6000816000190483118215151615610aaa57610aaa610875565b50029056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fe5a4a9e59cb0e4b98be997b4efbc8ce4b880e6b094e8808ce5b7b2e38082e6839fe69c89e58aa8e99d99efbc8ce98182e58886e998b4e998b3efbc9be69c89e88081e5b091efbc8ce98182e58886e59b9be8b1a1e38082e6b0b4e88085efbc8ce5a4aae998b4e4b99fefbc9be781abe88085efbc8ce5a4aae998b3e4b99fefbc9be69ca8e88085efbc8ce5b091e998b3e4b99fefbc9be98791e88085efbc8ce5b091e998b4e4b99fefbc9be59c9fe88085efbc8ce998b4e998b3e88081e5b091efbc8ce69ca8e781abe98791e6b0b4e586b2e6b094e68980e7bb93e4b99fe38082e28094e28094e3808ae5ad90e5b9b3e79c9fe8afa0e3808ba2646970667358221220bc1e9ffd2687291c7254c3cf72268994f2a10a154a3d5913c0ba9f5319d4364f64736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c80637284e4161461003b57806382b6e4d414610059575b600080fd5b61004361006c565b6040516100509190610485565b60405180910390f35b61004361006736600461056f565b610089565b60405180610120016040528060f98152602001610af060f9913981565b6060600082516001146100b7576040518060400160405280600381526020016206264760eb1b8152506100d4565b60405180604001604052806003815260200162189c9b60e91b8152505b6040516020016100e4919061067e565b604051602081830303815290604052905060005b835181101561014f578184828151811061011457610114610830565b602002602001015160405160200161012d929190610846565b6040516020818303038152906040529150806101489061088b565b90506100f8565b508060405160200161016191906108a6565b604051602081830303815290604052905060006101cb610180876101fb565b8660405180610120016040528060f98152602001610af060f991396101a486610301565b6040516020016101b794939291906108d7565b604051602081830303815290604052610301565b90506000816040516020016101e091906109de565b60408051808303601f19018152919052979650505050505050565b60608161021f5750506040805180820190915260018152600360fc1b602082015290565b8160005b811561024957806102338161088b565b91506102429050600a83610a39565b9150610223565b60008167ffffffffffffffff811115610264576102646104b8565b6040519080825280601f01601f19166020018201604052801561028e576020820181803683370190505b5090505b84156102f9576102a3600183610a4d565b91506102b0600a86610a64565b6102bb906030610a78565b60f81b8183815181106102d0576102d0610830565b60200101906001600160f81b031916908160001a9053506102f2600a86610a39565b9450610292565b949350505050565b606081516000141561032157505060408051602081019091526000815290565b6000604051806060016040528060408152602001610ab060409139905060006003845160026103509190610a78565b61035a9190610a39565b610365906004610a90565b67ffffffffffffffff81111561037d5761037d6104b8565b6040519080825280601f01601f1916602001820160405280156103a7576020820181803683370190505b509050600182016020820185865187015b80821015610413576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f81168501518453506001830192506103b8565b505060038651066001811461042f57600281146104425761044a565b603d6001830353603d600283035361044a565b603d60018303535b509195945050505050565b60005b83811015610470578181015183820152602001610458565b8381111561047f576000848401525b50505050565b60208152600082518060208401526104a4816040850160208701610455565b601f01601f19169190910160400192915050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156104f7576104f76104b8565b604052919050565b600082601f83011261051057600080fd5b813567ffffffffffffffff81111561052a5761052a6104b8565b61053d601f8201601f19166020016104ce565b81815284602083860101111561055257600080fd5b816020850160208301376000918101602001919091529392505050565b60008060006060848603121561058457600080fd5b8335925060208085013567ffffffffffffffff808211156105a457600080fd5b6105b0888389016104ff565b945060408701359150808211156105c657600080fd5b818701915087601f8301126105da57600080fd5b8135818111156105ec576105ec6104b8565b8060051b6105fb8582016104ce565b918252838101850191858101908b84111561061557600080fd5b86860192505b83831015610651578235858111156106335760008081fd5b6106418d89838a01016104ff565b835250918601919086019061061b565b809750505050505050509250925092565b60008151610674818560208601610455565b9290920192915050565b7f3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323081527f30302f73766722207072657365727665417370656374526174696f3d22784d6960208201527f6e594d696e206d656574222076696577426f783d223020302033353020333530604082015261111f60f11b60608201527f3c7374796c653e2e74207b2066696c6c3a2077686974653b20666f6e742d666160628201527f6d696c793a2073616e732d73657269663b20666f6e742d73697a653a2000000060828201526000825161075981609f850160208701610455565b7f70783b20746578742d616e63686f723a206d6964646c653b20646f6d696e616e609f918401918201527f742d626173656c696e653a206175746f3b2077726974696e672d6d6f64653a2060bf8201526c3a311d903e9e17b9ba3cb6329f60991b60df8201527f3c726563742077696474683d223130302522206865696768743d22313030252260ec8201526f103334b6361e91313630b1b59110179f60811b61010c8201526102f961011c82017f3c7465787420783d223530252220793d223530252220636c6173733d2274223e815260200190565b634e487b7160e01b600052603260045260246000fd5b60008351610858818460208801610455565b83519083019061086c818360208801610455565b01949350505050565b634e487b7160e01b600052601160045260246000fd5b600060001982141561089f5761089f610875565b5060010190565b600082516108b8818460208701610455565b6c1e17ba32bc3a1f1e17b9bb339f60991b920191825250600d01919050565b607b60f81b81526e226e616d65223a22385a44414f202360881b6001820152845160009061090c816010850160208a01610455565b6201016960ed1b601091840191820152855161092f816013840160208a01610455565b61088b60f21b6013929091019182018190526e113232b9b1b934b83a34b7b7111d1160891b6015830152855161096c816024850160208a01610455565b60249201918201527f22696d616765223a22646174613a696d6167652f7376672b786d6c3b626173656026820152620d8d0b60ea1b60468201526109d36109c66109b96049840187610662565b601160f91b815260010190565b607d60f81b815260010190565b979650505050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815260008251610a1681601d850160208701610455565b91909101601d0192915050565b634e487b7160e01b600052601260045260246000fd5b600082610a4857610a48610a23565b500490565b600082821015610a5f57610a5f610875565b500390565b600082610a7357610a73610a23565b500690565b60008219821115610a8b57610a8b610875565b500190565b6000816000190483118215151615610aaa57610aaa610875565b50029056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fe5a4a9e59cb0e4b98be997b4efbc8ce4b880e6b094e8808ce5b7b2e38082e6839fe69c89e58aa8e99d99efbc8ce98182e58886e998b4e998b3efbc9be69c89e88081e5b091efbc8ce98182e58886e59b9be8b1a1e38082e6b0b4e88085efbc8ce5a4aae998b4e4b99fefbc9be781abe88085efbc8ce5a4aae998b3e4b99fefbc9be69ca8e88085efbc8ce5b091e998b3e4b99fefbc9be98791e88085efbc8ce5b091e998b4e4b99fefbc9be59c9fe88085efbc8ce998b4e998b3e88081e5b091efbc8ce69ca8e781abe98791e6b0b4e586b2e6b094e68980e7bb93e4b99fe38082e28094e28094e3808ae5ad90e5b9b3e79c9fe8afa0e3808ba2646970667358221220bc1e9ffd2687291c7254c3cf72268994f2a10a154a3d5913c0ba9f5319d4364f64736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}